@page
@model Buttontester.Pages.IndexModel
@{
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Buttontester</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/picocss/2.0.6/pico.min.css" integrity="sha512-UXfikgakSZBii5lkvmDCRO+IYWQhTtwMOJ+3EmGEA+oA82kvbSskgw3OI16Jx1kINgF8aqOkYE+c9h4m6muONg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/geo-location-javascript/0.4.8/geo.js" integrity="sha512-2DQQKauN/4TxnFSftXZH1NY+/+8tDaqIM8VyppLRTLIAJgZ3KJy9ztGEuukRb995VXQsrQqWUSUlGPK8pPuxMQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <style>
        h4 {
            color: #53afde;
        }
        #modal {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
        }
        #modal button {
            padding: 10px 20px;
        }
        .hidden {
            display: none;
        }
        #results {
            text-align: center;
            margin-top: 20px;
        }
        #results article {
            display: inline-block;
            margin: 10px 10px;
            background-color: #EAEAEA;
            width: 275px;
            height: 200px; 
            padding: 50px;
            border-radius: 5px;
            vertical-align: top; 
            box-sizing: border-box;
            margin-bottom: 30px;
        }

        #results .fa, #results .not-found {
            font-size: 24px;
            display: block;
            text-align: center; 
            line-height: 24px; 
        }

        #error-content {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }
        .spinner {
            text-align: center;
            margin-top: 20px;
        }
        .refresh {
            margin-top: 20px;
            color: white;
        }
        a {
            text-decoration: none;
            color: white;
        }
    </style>
</head>
<body>
    <div id="app">
        <section id="modal">
            <!-- Texte à afficher après la fermeture du modal -->
            <div v-if="showResults" id="results">
                <h2>Test d'éligibilité à Sigfox et LoRaWAN</h2>
                <h3>Résultats :</h3>
                <article>
                    <h4>Sigfox</h4>
                    <div v-if="showSpinner && sigfoxStatus === null" class="spinner">
                        <i class="fa fa-spinner fa-spin"></i>
                    </div>
                    <div v-if="sigfoxStatus !== null && sigfoxStatus !== 'Not Found'">
                        <p><strong>Qualité: {{SigfoxSignalLevel}} ({{SigfoxGatewayCnt}} antennes)</strong></p>
                    </div>
                    <p v-if="lorawanStatus === 'Not Found'" class="not-found">Not Found</p>
                </article>
                <article>
                    <h4>LoRaWAN</h4>
                    <div v-if="showSpinner && lorawanStatus === null" class="spinner">
                        <i class="fa fa-spinner fa-spin"></i>
                    </div>
                    <div v-if="lorawanStatus !== null && lorawanStatus !== 'Not Found'">
                        <p><strong>Qualité: {{LoraSignalLevel}} ({{LoraGatewayCnt}} antennes)</strong></p>
                    </div>
                    <p v-if="lorawanStatus === 'Not Found'" class="not-found">Not Found</p>
                </article>
            </div>
			<h3>Localisation :</h3>
            <p id="location"></p>
            <button class="secondary refresh" onclick="window.location.reload();">Redémarrer un test</button>
        </section>
        <dialog id="modal-example" open>
            <article>
                <!-- Accueil -->
                <div id="modalContent1">
                    <h4>Bienvenue sur le Test d'éligibilité</h4>
                    <p>
                        Vous allez maintenant procéder au test d'éligibilité de votre capteur à Sigfox et LoRaWAN.
                    </p>
                    <!-- Bouton suivant -->
                    <button class="secondary" id="nextButton1">Suivant</button>
                </div>
                <!-- Placer le bouton -->
                <div id="modalContent2" class="hidden">
                    <h4>Placer le bouton</h4>
                    <p>Placer le bouton à la place de votre futur capteur.</p>
                    <!-- Bouton suivant -->
                    <button class="secondary" id="nextButton2">Suivant</button>
                </div>
                <!-- Appuyer sur le bouton -->
                <div id="modalContent3" class="hidden">
                    <h4>Appuyer sur le bouton</h4>
                    <p>Veuillez maintenant appuyer sur le bouton puis appuyez sur lancer.</p>
                    <!-- Boutons Lancer-->
                    <footer>
                        <button id="launchButton">Lancer</button>
                    </footer>
                </div>
            </article>
        </dialog>
        <dialog id="error-modal">
            <div id="error-content">
                <h2>Erreur d'initialisation</h2>
                <p id="error-message"></p>
                <button id="refreshButton">Rafraîchir la page</button>
            </div>
        </dialog>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js"></script>
    <script>
        new Vue({
            el: '#app',
            data: {
                currentStep: 1,
                isModalOpen: true,
                showResults: false,
                showSpinner: false,
                sigfoxStatus: null,
                lorawanStatus: null,
                sigfoxDeviceId: 'id-sigfox',
                lorawanDeviceId: 'id-lorawan',
                checkInterval: null,
                LoraGatewayCnt: null,
                LoraSignalLevel: null,
                SigfoxGatewayCnt: null,
                SigfoxSignalLevel: null,
                maxWaitTime: 60000,
                startTime: null
            },
            mounted() {
                document.getElementById('nextButton1').addEventListener('click', () => this.nextStep(2));
                document.getElementById('nextButton2').addEventListener('click', () => this.nextStep(3));
                document.getElementById('launchButton').addEventListener('click', this.startTest);
            },
            methods: {
                nextStep(step) {
                    this.currentStep = step;
                    this.updateModalContent();
                },
                startTest() {
                    this.showSpinner = true;
                    this.showResults = true;
                    this.startTime = Date.now();
                    document.getElementById('modal-example').close();
                    this.getUrlParams();
                    this.initNetworks();
                    this.checkInterval = setInterval(this.checkStatuses, 1000);
                    setTimeout(this.finishTest, this.maxWaitTime);
                },
                finishTest() {
                    if (this.sigfoxStatus === null) {
                        this.sigfoxStatus = 'Not Found';
                    }
                    if (this.lorawanStatus === null) {
                        this.lorawanStatus = 'Not Found';
                    }
                    this.showSpinner = false;
                    clearInterval(this.checkInterval);
                },
                updateModalContent() {
                    for (let i = 1; i <= 3; i++) {
                        document.getElementById('modalContent' + i).classList.add('hidden');
                    }
                    document.getElementById('modalContent' + this.currentStep).classList.remove('hidden');
                },
                getUrlParams() {
                    const params = new URLSearchParams(window.location.search);
                    this.sigfoxDeviceId = params.get('deviceSigfox');
                    this.lorawanDeviceId = params.get('deviceLoraWan');
                },
                async checkStatuses() {
                    await this.checkSigfoxStatus();
                    await this.checkLorawanStatus();
                    if (this.sigfoxStatus && this.lorawanStatus) {
                        clearInterval(this.checkInterval);
                        setTimeout(this.finishTest, 0);
                    }
                },
                async checkSigfoxStatus() {
                    if (this.sigfoxStatus) return;
                    try {
                        const response = await fetch(`/sigfox/${this.sigfoxDeviceId}`);
                        if (response.ok) {
                            const data = await response.json();
                            this.sigfoxStatus = data.result;
                            this.SigfoxGatewayCnt = data.gatewayCnt;
                            this.SigfoxSignalLevel = data.signalLevel;
                        }
                    } catch (error) {
                        console.error('Error fetching Sigfox status:', error);
                    }
                },
                async checkLorawanStatus() {
                    if (this.lorawanStatus) return;
                    try {
                        const response = await fetch(`/lorawan/${this.lorawanDeviceId}`);
                        if (response.ok) {
                            const data = await response.json();
                            this.lorawanStatus = data.result;
                            this.LoraGatewayCnt = data.gatewayCnt;
                            this.LoraSignalLevel = data.signalLevel;
                        }
                    } catch (error) {
                        console.error('Error fetching Lorawan status:', error);
                    }
                },
                async initNetworks() {
                    try {
                        const response = await fetch(`/init-networks/${this.sigfoxDeviceId}/${this.lorawanDeviceId}`);
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        console.log('Networks initialized successfully.');
                    } catch (error) {
                        console.error('Error initializing networks:', error);
                    }
                },
                showErrorModal(error) {
                    this.errorMessage = error.message;
                    document.getElementById('error-message').innerText = this.errorMessage;
                    document.getElementById('error-modal').showModal();
                    document.getElementById('refreshButton').addEventListener('click', () => location.reload());
                }
            }
        });
 
        let showLatitude = true; // Variable de commutation pour suivre l'état de l'affichage

        window.addEventListener('load', () => {
            if (navigator.geolocation) {
                // Commence à surveiller la position de l'utilisateur
                navigator.geolocation.watchPosition(showPosition, showError, {
                    enableHighAccuracy: true,
                    maximumAge: 0,
                    timeout: 5000
                });
            } else {
                document.getElementById('location').innerText = "Geolocation is not supported by this browser.";
            }
        });

        function showPosition(position) {
            let latitude, longitude;
            if (showLatitude) {
                latitude = position.coords.latitude;
                longitude = position.coords.longitude;
            } else {
                latitude = position.coords.longitude; // Inverse latitude et longitude
                longitude = position.coords.latitude;
            }

            // Efface l'élément texte avant d'afficher la nouvelle position
            document.getElementById('location').innerText = '';

            document.getElementById('location').innerText = `Latitude: ${latitude}, Longitude: ${longitude}`;
            showLatitude = !showLatitude; // Inverse l'état de l'affichage pour la prochaine actualisation
        }

        function showError(error) {
            switch (error.code) {
                case error.PERMISSION_DENIED:
                    document.getElementById('location').innerText = "User denied the request for Geolocation.";
                    break;
                case error.POSITION_UNAVAILABLE:
                    document.getElementById('location').innerText = "Location information is unavailable.";
                    break;
                case error.TIMEOUT:
                    document.getElementById('location').innerText = "The request to get user location timed out.";
                    break;
                case error.UNKNOWN_ERROR:
                    document.getElementById('location').innerText = "An unknown error occurred.";
                    break;
            }
        }

    </script>
</body>
</html>