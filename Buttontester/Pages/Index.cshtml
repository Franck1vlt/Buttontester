@page
@model Buttontester.Pages.IndexModel
@{
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Buttontester</title>
    <!-- Inclure le fichier CSS de Picocss -->
    <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/picocss/2.0.6/pico.min.css" integrity="sha512-UXfikgakSZBii5lkvmDCRO+IYWQhTtwMOJ+3EmGEA+oA82kvbSskgw3OI16Jx1kINgF8aqOkYE+c9h4m6muONg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
</head>
<body>
    <section id="modal">
        <h2>Test d'égibilité à Sigfox et Lorawan</h2>
        <button class="contrast" data-target="modal-example" onclick="toggleModal(event)">Démarer le test</button>
    </section>
    <dialog id="modal-example" >
        <article>
            <header>
                <h3>Démarer le test d'égibilité</h3>
            </header>
            <!-- Contenu initial -->
            <div id="modalContent1">
                <p>
                    Les Cramptés de Raphael
                </p>
                <!-- Bouton suivant -->
                <button class="secondary" onclick="showNextContent(2)">Suivant</button>
            </div>
            <!-- Contenu 2 -->
            <div id="modalContent2" style="display: none;">
                <p>Contenu 2</p>
                <button class="secondary" onclick="showNextContent(3)">Suivant</button>
            </div>
            <!-- Contenu 3 -->
            <div id="modalContent3" style="display: none;">
                <p>Contenu 3</p>
                <i class="fa fa-spinner fa-spin"></i>
                <i class="fa fa-close" style="color:red"></i>
                <i class="fa fa-check" style="color:green"></i>

                <!-- Boutons Cancel et Confirm -->
                <footer>
                    <button autofocus data-target="modal-example" onclick="startTest()">Lancer</button>
                </footer>
            </div>
        </article>

    </dialog>
    <section id="test" style="display: none;">
        Section affiché
        <div id="app">
            <h1>Test du status des réseaux lpwan</h1>
            <div>
                <p>Sigfox Status: {{ sigfoxStatus }}</p>
            </div>
            <div>
                <p>LoRaWAN Status: {{ lorawanStatus }}</p>
            </div>
        </div>
    </section>


    <script type="module">
        import { createApp } from 'https://unpkg.com/vue@3/dist/vue.esm-browser.js'
        const app=createApp({
            data() {
                return {
                    sigfoxStatus: null,
                    lorawanStatus: null,
                    sigfoxDeviceId: 'id-sigfox', // Remplacez par l'ID réel de votre appareil Sigfox
                    lorawanDeviceId: 'id-lorawan', // Remplacez par l'ID réel de votre appareil LoRaWAN
                    timer:null
                };
            },
            mounted() {
                this.checkSigfoxStatus();
                this.checkLorawanStatus();
                this.initNetwork();
            },
            methods: {
                async initNetwork() { 
                    try {
                        const response = await fetch('https://localhost:7139/init-networks/id-sigfox/id-lorawan')
                    } catch(error) {
                        console.error('Error during network initialization:', error);
                    }
                },
                async checkSigfoxStatus() {
                    try {
                        const response = await fetch(`https://localhost:7139/sigfox/${this.sigfoxDeviceId}`);
                        if (response.ok) {
                            const data = await response.json(); // Convertir la réponse en JSON
                            this.sigfoxStatus = data.result; // Utiliser la propriété "status" de l'objet JSON
                        } else {
                            this.sigfoxStatus = 'Not Found';
                        }
                    } catch (error) {
                        console.error('Error fetching Sigfox status:', error);
                        this.sigfoxStatus = 'Error';
                    }
                },
                async checkLorawanStatus() {
                    try {
                        const response = await fetch(`https://localhost:7139/lorawan/${this.lorawanDeviceId}`);
                        if (response.ok) {
                            const data = await response.json(); // Convertir la réponse en JSON
                            this.lorawanStatus = data.result; // Utiliser la propriété "status" de l'objet JSON
                        } else {
                            this.lorawanStatus = 'Not Found';
                        }
                    } catch (error) {
                        console.error('Error fetching Lorawan status:', error);
                        this.lorawanStatus = 'Error';
                    }
                }
            }
        });
        app.mount('#app');
        </script>
    <script>

        // Config
        const isOpenClass = "modal-is-open";
        const openingClass = "modal-is-opening";
        const closingClass = "modal-is-closing";
        const scrollbarWidthCssVar = "--pico-scrollbar-width";
        const animationDuration = 400; // ms
        let visibleModal = null;

        // Fonction pour afficher le contenu suivant
        function showNextContent(contentNumber) {
            // Masquer tous les contenus
            for (let i = 1; i <= 3; i++) {
                document.getElementById("modalContent" + i).style.display = "none";
            }
            // Afficher le contenu correspondant au numéro spécifié
            document.getElementById("modalContent" + contentNumber).style.display = "block";
        }

        // Toggle modal
        const toggleModal = (event) => {
            event.preventDefault();
            const modal = document.getElementById(event.currentTarget.dataset.target);
            if (!modal) return;
            modal && (modal.open ? closeModal(modal) : openModal(modal));
        };

        // Open modal
        const openModal = (modal) => {
            const { documentElement: html } = document;
            const scrollbarWidth = getScrollbarWidth();
            if (scrollbarWidth) {
                html.style.setProperty(scrollbarWidthCssVar, `${scrollbarWidth}px`);
            }
            html.classList.add(isOpenClass, openingClass);
            setTimeout(() => {
                visibleModal = modal;
                html.classList.remove(openingClass);
            }, animationDuration);
            modal.showModal();
        };

        // Close modal
        const closeModal = (modal) => {
            visibleModal = null;
            const { documentElement: html } = document;
            html.classList.add(closingClass);
            setTimeout(() => {
                html.classList.remove(closingClass, isOpenClass);
                html.style.removeProperty(scrollbarWidthCssVar);
                modal.close();
            }, animationDuration);
        };

        // Close with Esc key
        document.addEventListener("keydown", (event) => {
            if (event.key === "Escape" && visibleModal) {
                closeModal(visibleModal);
            }
        });

        // Get scrollbar width
        const getScrollbarWidth = () => {
            const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;
            return scrollbarWidth;
        };

        // Is scrollbar visible
        const isScrollbarVisible = () => {
            return document.body.scrollHeight > screen.height;
        };

        const startTest = () => {
            // Masquer la modal
            closeModal(visibleModal);
            // Afficher la section de test
            document.getElementById('test').style.display = 'block';
        };
    </script>

</body>
</html>






